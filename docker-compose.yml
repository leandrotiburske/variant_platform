version: '3.9'
services:
  app:
    build: .
    ports:
      - "8080:8080"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - db
    command: [ "./wait-for-it.sh", "db:5432", "--", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080" ]

  db:
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "myuser" ]
      interval: 5s
      timeout: 5s
      retries: 5

  tests:
    build: .
    depends_on:
      test_db:
        condition: service_healthy
    env_file:
      - .env.test
    environment:
      - PYTHONPATH=/app
    command: [ "./wait-for-it.sh", "test_db:5432", "--", "pytest" ]

  test_db:
    image: postgres:15
    restart: always
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
      - POSTGRES_DB=test_db
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "myuser" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_test_data:/var/lib/postgresql/data

  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    working_dir: /app
    command: [ "sh", "-c", "npm run dev -- --host 0.0.0.0" ]
    environment:
      - CHOKIDAR_USEPOLLING=true

volumes:
  postgres_data:
  postgres_test_data:
